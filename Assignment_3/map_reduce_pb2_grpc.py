# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import map_reduce_pb2 as map__reduce__pb2


class MasterServiceStub(object):
    """Master Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """


class MasterServiceServicer(object):
    """Master Service
    """


def add_MasterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MasterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MasterService(object):
    """Master Service
    """


class MapperServiceStub(object):
    """Mapper Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Map = channel.unary_unary(
                '/MapperService/Map',
                request_serializer=map__reduce__pb2.MapRequest.SerializeToString,
                response_deserializer=map__reduce__pb2.MapResponse.FromString,
                )
        self.GetIntermediateData = channel.unary_unary(
                '/MapperService/GetIntermediateData',
                request_serializer=map__reduce__pb2.IntermediateDataRequest.SerializeToString,
                response_deserializer=map__reduce__pb2.IntermediateDataResponse.FromString,
                )


class MapperServiceServicer(object):
    """Mapper Service
    """

    def Map(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIntermediateData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapperServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Map': grpc.unary_unary_rpc_method_handler(
                    servicer.Map,
                    request_deserializer=map__reduce__pb2.MapRequest.FromString,
                    response_serializer=map__reduce__pb2.MapResponse.SerializeToString,
            ),
            'GetIntermediateData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIntermediateData,
                    request_deserializer=map__reduce__pb2.IntermediateDataRequest.FromString,
                    response_serializer=map__reduce__pb2.IntermediateDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MapperService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MapperService(object):
    """Mapper Service
    """

    @staticmethod
    def Map(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MapperService/Map',
            map__reduce__pb2.MapRequest.SerializeToString,
            map__reduce__pb2.MapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIntermediateData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MapperService/GetIntermediateData',
            map__reduce__pb2.IntermediateDataRequest.SerializeToString,
            map__reduce__pb2.IntermediateDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReducerServiceStub(object):
    """Reducer Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Reduce = channel.unary_unary(
                '/ReducerService/Reduce',
                request_serializer=map__reduce__pb2.ReduceRequest.SerializeToString,
                response_deserializer=map__reduce__pb2.ReduceResponse.FromString,
                )


class ReducerServiceServicer(object):
    """Reducer Service
    """

    def Reduce(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReducerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Reduce': grpc.unary_unary_rpc_method_handler(
                    servicer.Reduce,
                    request_deserializer=map__reduce__pb2.ReduceRequest.FromString,
                    response_serializer=map__reduce__pb2.ReduceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ReducerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReducerService(object):
    """Reducer Service
    """

    @staticmethod
    def Reduce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReducerService/Reduce',
            map__reduce__pb2.ReduceRequest.SerializeToString,
            map__reduce__pb2.ReduceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
